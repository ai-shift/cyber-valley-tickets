/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CyberValley {
  export type MultihashStruct = {
    digest: BytesLike;
    hashFunction: BigNumberish;
    size: BigNumberish;
  };

  export type MultihashStructOutput = [
    digest: string,
    hashFunction: bigint,
    size: bigint
  ] & { digest: string; hashFunction: bigint; size: bigint };
}

export interface CyberValleyEventManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BUCKET_SIZE"
      | "DEFAULT_ADMIN_ROLE"
      | "MASTER_ROLE"
      | "SECONDS_IN_DAY"
      | "approveEvent"
      | "cancelEvent"
      | "closeEvent"
      | "createEventPlace"
      | "declineEvent"
      | "devTeam"
      | "devTeamPercentage"
      | "eventPlaces"
      | "eventRequestPrice"
      | "eventTicketContract"
      | "events"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "master"
      | "masterPercentage"
      | "mintTicket"
      | "renounceRole"
      | "revokeRole"
      | "submitEventRequest"
      | "supportsInterface"
      | "updateEvent"
      | "updateEventPlace"
      | "usdtTokenContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventPlaceUpdated"
      | "EventStatusChanged"
      | "EventTicketVerified"
      | "EventUpdated"
      | "NewEventPlaceAvailable"
      | "NewEventRequest"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BUCKET_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEventPlace",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "declineEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devTeam", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devTeamPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventPlaces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventRequestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTicketContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTicket",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEventRequest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEvent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventPlace",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "usdtTokenContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BUCKET_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEventPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devTeamPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventTicketContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitEventRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdtTokenContract",
    data: BytesLike
  ): Result;
}

export namespace EventPlaceUpdatedEvent {
  export type InputTuple = [
    eventPlaceId: BigNumberish,
    maxTickets: BigNumberish,
    minTickets: BigNumberish,
    minPrice: BigNumberish,
    daysBeforeCancel: BigNumberish,
    minDays: BigNumberish,
    digest: BytesLike,
    hashFunction: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    eventPlaceId: bigint,
    maxTickets: bigint,
    minTickets: bigint,
    minPrice: bigint,
    daysBeforeCancel: bigint,
    minDays: bigint,
    digest: string,
    hashFunction: bigint,
    size: bigint
  ];
  export interface OutputObject {
    eventPlaceId: bigint;
    maxTickets: bigint;
    minTickets: bigint;
    minPrice: bigint;
    daysBeforeCancel: bigint;
    minDays: bigint;
    digest: string;
    hashFunction: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventStatusChangedEvent {
  export type InputTuple = [eventId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [eventId: bigint, status: bigint];
  export interface OutputObject {
    eventId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventTicketVerifiedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    eventPlaceId: BigNumberish,
    ticketPrice: BigNumberish,
    startDate: BigNumberish,
    daysAmount: BigNumberish,
    digest: BytesLike,
    hashFunction: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    eventPlaceId: bigint,
    ticketPrice: bigint,
    startDate: bigint,
    daysAmount: bigint,
    digest: string,
    hashFunction: bigint,
    size: bigint
  ];
  export interface OutputObject {
    id: bigint;
    eventPlaceId: bigint;
    ticketPrice: bigint;
    startDate: bigint;
    daysAmount: bigint;
    digest: string;
    hashFunction: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewEventPlaceAvailableEvent {
  export type InputTuple = [
    eventPlaceId: BigNumberish,
    maxTickets: BigNumberish,
    minTickets: BigNumberish,
    minPrice: BigNumberish,
    daysBeforeCancel: BigNumberish,
    minDays: BigNumberish,
    digest: BytesLike,
    hashFunction: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    eventPlaceId: bigint,
    maxTickets: bigint,
    minTickets: bigint,
    minPrice: bigint,
    daysBeforeCancel: bigint,
    minDays: bigint,
    digest: string,
    hashFunction: bigint,
    size: bigint
  ];
  export interface OutputObject {
    eventPlaceId: bigint;
    maxTickets: bigint;
    minTickets: bigint;
    minPrice: bigint;
    daysBeforeCancel: bigint;
    minDays: bigint;
    digest: string;
    hashFunction: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewEventRequestEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    eventPlaceId: BigNumberish,
    ticketPrice: BigNumberish,
    startDate: BigNumberish,
    daysAmount: BigNumberish,
    digest: BytesLike,
    hashFunction: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    eventPlaceId: bigint,
    ticketPrice: bigint,
    startDate: bigint,
    daysAmount: bigint,
    digest: string,
    hashFunction: bigint,
    size: bigint
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    eventPlaceId: bigint;
    ticketPrice: bigint;
    startDate: bigint;
    daysAmount: bigint;
    digest: string;
    hashFunction: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CyberValleyEventManager extends BaseContract {
  connect(runner?: ContractRunner | null): CyberValleyEventManager;
  waitForDeployment(): Promise<this>;

  interface: CyberValleyEventManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BUCKET_SIZE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MASTER_ROLE: TypedContractMethod<[], [string], "view">;

  SECONDS_IN_DAY: TypedContractMethod<[], [bigint], "view">;

  approveEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEventPlace: TypedContractMethod<
    [
      _maxTickets: BigNumberish,
      _minTickets: BigNumberish,
      _minPrice: BigNumberish,
      _daysBeforeCancel: BigNumberish,
      _minDays: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  declineEvent: TypedContractMethod<
    [eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  devTeam: TypedContractMethod<[], [string], "view">;

  devTeamPercentage: TypedContractMethod<[], [bigint], "view">;

  eventPlaces: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CyberValley.MultihashStructOutput
      ] & {
        maxTickets: bigint;
        minTickets: bigint;
        minPrice: bigint;
        daysBeforeCancel: bigint;
        minDays: bigint;
        meta: CyberValley.MultihashStructOutput;
      }
    ],
    "view"
  >;

  eventRequestPrice: TypedContractMethod<[], [bigint], "view">;

  eventTicketContract: TypedContractMethod<[], [string], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CyberValley.MultihashStructOutput
      ] & {
        creator: string;
        eventPlaceId: bigint;
        ticketPrice: bigint;
        startDate: bigint;
        daysAmount: bigint;
        status: bigint;
        meta: CyberValley.MultihashStructOutput;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  master: TypedContractMethod<[], [string], "view">;

  masterPercentage: TypedContractMethod<[], [bigint], "view">;

  mintTicket: TypedContractMethod<
    [
      eventId: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  submitEventRequest: TypedContractMethod<
    [
      eventPlaceId: BigNumberish,
      ticketPrice: BigNumberish,
      startDate: BigNumberish,
      daysAmount: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateEvent: TypedContractMethod<
    [
      eventId: BigNumberish,
      eventPlaceId: BigNumberish,
      ticketPrice: BigNumberish,
      startDate: BigNumberish,
      daysAmount: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateEventPlace: TypedContractMethod<
    [
      eventPlaceId: BigNumberish,
      _maxTickets: BigNumberish,
      _minTickets: BigNumberish,
      _minPrice: BigNumberish,
      _daysBeforeCancel: BigNumberish,
      _minDays: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  usdtTokenContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BUCKET_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MASTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SECONDS_IN_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEventPlace"
  ): TypedContractMethod<
    [
      _maxTickets: BigNumberish,
      _minTickets: BigNumberish,
      _minPrice: BigNumberish,
      _daysBeforeCancel: BigNumberish,
      _minDays: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declineEvent"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "devTeam"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "devTeamPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventPlaces"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CyberValley.MultihashStructOutput
      ] & {
        maxTickets: bigint;
        minTickets: bigint;
        minPrice: bigint;
        daysBeforeCancel: bigint;
        minDays: bigint;
        meta: CyberValley.MultihashStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eventRequestPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventTicketContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        CyberValley.MultihashStructOutput
      ] & {
        creator: string;
        eventPlaceId: bigint;
        ticketPrice: bigint;
        startDate: bigint;
        daysAmount: bigint;
        status: bigint;
        meta: CyberValley.MultihashStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "master"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "masterPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTicket"
  ): TypedContractMethod<
    [
      eventId: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitEventRequest"
  ): TypedContractMethod<
    [
      eventPlaceId: BigNumberish,
      ticketPrice: BigNumberish,
      startDate: BigNumberish,
      daysAmount: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateEvent"
  ): TypedContractMethod<
    [
      eventId: BigNumberish,
      eventPlaceId: BigNumberish,
      ticketPrice: BigNumberish,
      startDate: BigNumberish,
      daysAmount: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEventPlace"
  ): TypedContractMethod<
    [
      eventPlaceId: BigNumberish,
      _maxTickets: BigNumberish,
      _minTickets: BigNumberish,
      _minPrice: BigNumberish,
      _daysBeforeCancel: BigNumberish,
      _minDays: BigNumberish,
      digest: BytesLike,
      hashFunction: BigNumberish,
      size: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdtTokenContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EventPlaceUpdated"
  ): TypedContractEvent<
    EventPlaceUpdatedEvent.InputTuple,
    EventPlaceUpdatedEvent.OutputTuple,
    EventPlaceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EventStatusChanged"
  ): TypedContractEvent<
    EventStatusChangedEvent.InputTuple,
    EventStatusChangedEvent.OutputTuple,
    EventStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "EventTicketVerified"
  ): TypedContractEvent<
    EventTicketVerifiedEvent.InputTuple,
    EventTicketVerifiedEvent.OutputTuple,
    EventTicketVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "EventUpdated"
  ): TypedContractEvent<
    EventUpdatedEvent.InputTuple,
    EventUpdatedEvent.OutputTuple,
    EventUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NewEventPlaceAvailable"
  ): TypedContractEvent<
    NewEventPlaceAvailableEvent.InputTuple,
    NewEventPlaceAvailableEvent.OutputTuple,
    NewEventPlaceAvailableEvent.OutputObject
  >;
  getEvent(
    key: "NewEventRequest"
  ): TypedContractEvent<
    NewEventRequestEvent.InputTuple,
    NewEventRequestEvent.OutputTuple,
    NewEventRequestEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "EventPlaceUpdated(uint256,uint16,uint16,uint16,uint8,uint8,bytes32,uint8,uint8)": TypedContractEvent<
      EventPlaceUpdatedEvent.InputTuple,
      EventPlaceUpdatedEvent.OutputTuple,
      EventPlaceUpdatedEvent.OutputObject
    >;
    EventPlaceUpdated: TypedContractEvent<
      EventPlaceUpdatedEvent.InputTuple,
      EventPlaceUpdatedEvent.OutputTuple,
      EventPlaceUpdatedEvent.OutputObject
    >;

    "EventStatusChanged(uint256,uint8)": TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;
    EventStatusChanged: TypedContractEvent<
      EventStatusChangedEvent.InputTuple,
      EventStatusChangedEvent.OutputTuple,
      EventStatusChangedEvent.OutputObject
    >;

    "EventTicketVerified(uint256)": TypedContractEvent<
      EventTicketVerifiedEvent.InputTuple,
      EventTicketVerifiedEvent.OutputTuple,
      EventTicketVerifiedEvent.OutputObject
    >;
    EventTicketVerified: TypedContractEvent<
      EventTicketVerifiedEvent.InputTuple,
      EventTicketVerifiedEvent.OutputTuple,
      EventTicketVerifiedEvent.OutputObject
    >;

    "EventUpdated(uint256,uint256,uint16,uint256,uint16,bytes32,uint8,uint8)": TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;
    EventUpdated: TypedContractEvent<
      EventUpdatedEvent.InputTuple,
      EventUpdatedEvent.OutputTuple,
      EventUpdatedEvent.OutputObject
    >;

    "NewEventPlaceAvailable(uint256,uint16,uint16,uint16,uint8,uint8,bytes32,uint8,uint8)": TypedContractEvent<
      NewEventPlaceAvailableEvent.InputTuple,
      NewEventPlaceAvailableEvent.OutputTuple,
      NewEventPlaceAvailableEvent.OutputObject
    >;
    NewEventPlaceAvailable: TypedContractEvent<
      NewEventPlaceAvailableEvent.InputTuple,
      NewEventPlaceAvailableEvent.OutputTuple,
      NewEventPlaceAvailableEvent.OutputObject
    >;

    "NewEventRequest(uint256,address,uint256,uint16,uint256,uint16,bytes32,uint8,uint8)": TypedContractEvent<
      NewEventRequestEvent.InputTuple,
      NewEventRequestEvent.OutputTuple,
      NewEventRequestEvent.OutputObject
    >;
    NewEventRequest: TypedContractEvent<
      NewEventRequestEvent.InputTuple,
      NewEventRequestEvent.OutputTuple,
      NewEventRequestEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
