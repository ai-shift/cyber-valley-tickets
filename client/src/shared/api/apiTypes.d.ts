/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/web3/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_auth_web3_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Available events in the syste */
        get: operations["api_events_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_events_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_notifications_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_notifications_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/places/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API endpoint that allows event places to be viewed */
        get: operations["api_places_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/places/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API endpoint that allows event places to be viewed */
        get: operations["api_places_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Creator: {
            address: string;
        };
        CreatorEvent: {
            readonly id: number;
            creator: components["schemas"]["Creator"];
            status?: components["schemas"]["StatusEnum"];
            title: string;
            description: string;
            /** Format: int64 */
            place: number;
            /** Format: int64 */
            ticketPrice: number;
            startDate: number;
            /** Format: int64 */
            daysAmount: number;
            /** Format: uri */
            imageUrl?: string | null;
            ticketsBought: number | null;
            cancelDate: number | null;
            readonly ticketsRequiredUntilCancel: number | null;
        };
        EventPlace: {
            /** Format: int64 */
            id: number;
            title: string;
            /** Format: int64 */
            maxTickets: number;
            /** Format: int64 */
            minTickets: number;
            /** Format: int64 */
            minPrice: number;
            /** Format: int64 */
            minDays: number;
            /** Format: int64 */
            daysBeforeCancel: number;
            available?: boolean;
            readonly isUsed: boolean;
        };
        Notification: {
            title: string;
            body: string;
            /** Format: date-time */
            seenAt?: string | null;
        };
        RoleBasedEvent: components["schemas"]["CreatorEvent"] | components["schemas"]["StaffEvent"];
        StaffEvent: {
            readonly id: number;
            creator: components["schemas"]["Creator"];
            status?: components["schemas"]["StatusEnum"];
            title: string;
            description: string;
            /** Format: int64 */
            place: number;
            /** Format: int64 */
            ticketPrice: number;
            startDate: number;
            /** Format: int64 */
            daysAmount: number;
            /** Format: uri */
            imageUrl?: string | null;
            /** Format: int64 */
            ticketsBought: number;
            cancelDate: number;
            readonly ticketsRequiredUntilCancel: number;
        };
        /**
         * @description * `submitted` - Submitted
         *     * `approved` - Approved
         *     * `declined` - Declined
         *     * `cancelled` - Cancelled
         *     * `closed` - Closed
         * @enum {string}
         */
        StatusEnum: "submitted" | "approved" | "declined" | "cancelled" | "closed";
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_auth_web3_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_events_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleBasedEvent"][];
                };
            };
        };
    };
    api_events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorEvent"];
                };
            };
        };
    };
    api_notifications_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"][];
                };
            };
        };
    };
    api_notifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    api_places_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventPlace"][];
                };
            };
        };
    };
    api_places_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this event place. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventPlace"];
                };
            };
        };
    };
    api_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
                "application/json": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
}
