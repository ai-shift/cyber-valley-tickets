#+title: Cyber Valley Tickets
#+author: aishift
#+LATEX_HEADER: \usepackage[margin=1.3in]{geometry}

* Table of contents                                          :toc_3:noexport:
- [[#problem][Problem]]
- [[#solution][Solution]]
  - [[#roles][Roles]]
    - [[#customer][Customer]]
    - [[#staff][Staff]]
    - [[#creator][Creator]]
    - [[#master][Master]]
  - [[#use-cases][Use cases]]
    - [[#create-event-place][Create event place]]
    - [[#save-socials][Save socials]]
    - [[#submit-event-request][Submit event request]]
    - [[#approve-event-request][Approve event request]]
    - [[#edit-event-request][Edit event request]]
    - [[#list-events][List events]]
    - [[#buy-ticket][Buy ticket]]
    - [[#assign-events-staff][Assign event's staff]]
    - [[#show-ticket][Show ticket]]
    - [[#verify-bought-ticket][Verify bought ticket]]
    - [[#cancel-event][Cancel Event]]
    - [[#close-event][Close event]]
  - [[#tech-stack][Tech stack]]
  - [[#excluded-features-from-the-first-stage][Excluded features from the first stage]]
  - [[#proxy-contract-vs-multiple-versions][Proxy contract vs multiple versions]]
  - [[#component-design][Component design]]
    - [[#general-overview][General overview]]
    - [[#smart-contract][Smart contract]]
    - [[#backend][Backend]]
- [[#questions][Questions]]
  - [[#both-desktop-and-mobile-are-required][Both desktop and mobile are required?]]
  - [[#is-it-required-to-verify-tickets-without-internet-connection][Is it required to verify tickets without internet connection?]]
  - [[#will-be-there-multiple-masters-or-the-only-one-in-foreseeable-future][Will be there multiple masters or the only one in foreseeable future?]]
  - [[#event-request-price-fixed-in-eth-depends-on-ethusd-rate-or-could-be-changed-by-the-master][Event request price fixed in ETH, depends on ETH/USD rate or could be changed by the master?]]
  - [[#is-a-ticket-transfer-allowed-eg-customer-a-bought-a-ticket-but-sent-it-to-the-customer-b][Is a ticket transfer allowed e.g. customer A bought a ticket, but sent it to the customer B?]]
  - [[#will-tickets-have-some-metainfo-about-the-owner-name-number-etc][Will tickets have some metainfo about the owner (name, number etc)]]
  - [[#is-it-applicable-to-show-available-seats-count-for-all-so-the-creator-and-master-can-see-it-as-well-without-additional-screen][Is it applicable to show available seats count for all (so the creator and master can see it as well without additional screen)?]]
  - [[#ui-design-references][UI design references]]

* Problem

Cyber Valley wants to host events and needs a convenient way to accept events offers from creators, sell tickets in crypto, verify bought tickets from customer's devices and distribution of acquired means across creator, master and dev team

* Solution

Create Web3 mobile first web app based on Ethereum network which covers main needs

** Roles

*** Customer

Public role which has the following authorities:

- List events
- Buy ticket to event

*** Staff

Assigned to each event by the master role. Has all customer's authorities and:

- Verify tickets for the assigned event

*** Creator

A.k.a shaman has all customer's authorities and:

- Send event request
- Edit own event requests

*** Master

Has all customer's, staff's and creator's authorities and:

- Create event space
- Approve event requests
- Approve event changes
- Cancel event
- Close events

** Use cases

*** Create event place

#+begin_src plantuml :file ./img/event-place.png
class EventPlace {
  minTickets: uint16
  maxTickets: uint16
  minPrice: uint16
  minDays: uint8
}
#+end_src

#+RESULTS:
[[file:./img/event-place.png]]

#+begin_src plantuml :file ./img/create-event-place.png
title Create event place

actor Master
participant TicketsApp
actor IPFS
participant SmartContract

Master -> TicketsApp: New event place data
TicketsApp -> IPFS: Upload event place meta info
TicketsApp -> SmartContract: Store new event place
#+end_src

#+RESULTS:
[[file:./img/create-event-place.png]]

*** Save socials

Supported socials:

- Telegram
- Discord
- Whats App
- Instagram

**** V1

Used socials stored in the browser cache, so customer should input his social on each new device

#+begin_src plantuml :file ./img/v1-save-socials.png
title Save socials

actor Customer
participant TicketsApp
actor BrowserLocalStorage

Customer -> TicketsApp: Provide one of the socials
TicketsApp -> BrowserLocalStorage: Save socials for the future use
#+end_src

#+RESULTS:
[[file:./img/v1-save-socials.png]]

**** V2

Used socials stored in the centralized database which allows to sync state of the all devices

#+begin_src plantuml :file ./img/v2-save-socials.png
title Save socials

actor Customer
participant TicketsApp
participant Backend
participant Database
actor BrowserLocalStorage

Customer -> TicketsApp: Provide one of the socials
TicketsApp -> BrowserLocalStorage: Save socials for the future use
TicketsApp -> Backend: Send used socials
Backend -> Database: Persis used socials
#+end_src

#+RESULTS:
[[file:./img/v2-save-socials.png]]

*** Submit event request

#+begin_src plantuml :file ./img/event-request.png
class EventRequest {
  eventPlaceId: uint16
  ticketPrice: uint16
  startDate: uint256
  cancelDate: uint256
  daysAmount: uint8
}
#+end_src

#+RESULTS:
[[file:./img/event-request.png]]

#+begin_src plantuml :file ./img/submit-event-request.png
title Submit event request

actor Creator
participant TicketsApp
participant SmartContract
participant Backend
actor Master

Creator -> TicketsApp: Fill event request form
TicketsApp -> Backend: Store metadata
TicketsApp -> Creator: Send bid
Creator -> SmartContract: Send required funds
TicketsApp -> Master: New event added to the pending requets list
#+end_src

#+RESULTS:
[[file:./img/submit-event-request.png]]

*** Approve event request

#+begin_src plantuml :file ./img/event-approve.png
class EventApprove {
  eventId: uint256
  eventMetadataMultihash: Multihash
}
#+end_src

#+RESULTS:
[[file:./img/event-approve.png]]

#+begin_src plantuml :file ./img/approve-event-request.png
title Approve event request

actor Master
participant TicketsApp
participant Backend
actor IPFS
participant SmartContract

Master -> TicketsApp: Approve event
TicketsApp -> Backend: Get event request metadata
TicketsApp -> IPFS: Upload event metadata
TicketsApp -> SmartContract: Approve event
#+end_src

#+RESULTS:
[[file:./img/approve-event-request.png]]

*** Edit event request

#+begin_src plantuml :file ./img/edit-event-request.png
title Edit event request

actor Creator
participant TicketsApp
participant SmartContract
participant Backend
actor Master

alt event approved
  Master -> TicketsApp: Edit event
  TicketsApp -> IPFS: Update value
  TicketsApp -> SmartContract: Save changes
else
  Creator -> TicketsApp: Update event metadata
  TicketsApp -> Backend: Update value
end
#+end_src

#+RESULTS:
[[file:./img/edit-event-request.png]]

*** List events

#+begin_src plantuml :file ./img/list-events.png
title List events

actor Customer
participant TicketsApp
participant SmartContract
actor IPFS

Customer -> TicketsApp: List events
TicketsApp -> SmartContract: View events
loop for each event
  TicketsApp -> IPFS: Fetch meta data
  TicketsApp -> Customer: Show event
end
#+end_src

#+RESULTS:
[[file:./img/list-events.png]]

*** Buy ticket

**** V1
#+begin_src plantuml :file ./img/v1-buy-ticket.png
title Buy ticket

actor Customer
participant TicketsApp
actor IPFS
participant SmartContract

Customer -> TicketsApp: Buy a ticket for the selected event
TicketsApp -> Customer: Request socials
TicketsApp -> IPFS: Store socials
TicketsApp -> Customer: Send bid
Customer -> SmartContract: Transfer USDT
SmartContract -> TicketsApp: Emits the success event
TicketsApp -> Customer: Congratualition here is your ticket
#+end_src

#+RESULTS:
[[file:./img/v1-buy-ticket.png]]

**** V2
#+begin_src plantuml :file ./img/v2-buy-ticket.png
title Buy ticket

actor Customer
participant TicketsApp
actor IPFS
participant SmartContract

Customer -> TicketsApp: Buy a ticket for the selected event
TicketsApp -> Customer: Request socials
TicketsApp -> IPFS: Store socials
TicketsApp -> Customer: Send bid
alt Customer does not have enough USDT
  TicketsApp -> Customer: Offer to swap the biggest asset to USDT
end
Customer -> SmartContract: Transfer USDT
SmartContract -> TicketsApp: Emits the success event
TicketsApp -> Customer: Congratualition here is your ticket
#+end_src

#+RESULTS:
[[file:./img/v2-buy-ticket.png]]

*** Assign event's staff

This could be changed to the array of staff independent from the event which can be edited by the master.

Also given approach makes it difficult to list events for the given staff's address and requires GAS for each edit.

As and alternative we can store staff addresses in the IPFS, but it'll introduce some latency in exchange of less GAS cost.

#+begin_src plantuml :file ./img/assign-event-staff.png
title Assign event staff

actor Master
participant TicketsApp
participant SmartContract

Master -> TicketsApp: Assign given EOA as staff for the event
TicketsApp -> SmartContract: Store EOA as staff
#+end_src

#+RESULTS:
[[file:./img/assign-event-staff.png]]

*** Show ticket

#+begin_src plantuml :file ./img/show-ticket.png
actor Customer
participant TicketsApp
participant SmartContract
actor IPFS

Customer -> TicketsApp: Show ticket for the given event
TicketsApp -> IPFS: Fetch ticket socials
TicketsApp -> SmartContract: View bought ticket
TicketsApp -> Customer: Show ticket QR
#+end_src

#+RESULTS:
[[file:./img/show-ticket.png]]

*** Verify bought ticket

#+begin_src plantuml :file ./img/verify-bought-ticket.png
title Verify bought ticket

actor Customer
actor Staff
participant TicketsApp
participant SmartContract

Customer -> TicketsApp: Display QR
Customer -> Staff: Show QR
Staff -> TicketsApp: Verify QR
TicketsApp -> SmartContract: Verify authority and NFT correctness
#+end_src

#+RESULTS:
[[file:./img/verify-bought-ticket.png]]

*** Cancel Event

#+begin_src plantuml :file ./img/cancel-event.png
title Cancel event

participant Backend
actor Creator
actor Customer
participant SmartContract

Backend -> SmartContract: Cancel event
SmartContract -> Creator: Send refund
loop for each customer with a ticket
  SmartContract -> Customer: Send refund
end
#+end_src

#+RESULTS:
[[file:./img/cancel-event.png]]

*** Close event

#+begin_src plantuml :file ./img/close-event.png
actor Master
participant TicketsApp
participant SmartContract
actor Creator
actor DevTeam

Master -> TicketsApp: Close event
TicketsApp -> SmartContract: Close event
SmartContract -> Master: Send funds
SmartContract -> Creator: Send funds
SmartContract -> DevTeam: Send funds
#+end_src

#+RESULTS:
[[file:./img/close-event.png]]

** Tech stack

Solidity, OpenZeppelin, React, TypeScript, Tailwind, ethers.js, IPFS

Also a thin backend over database is required to provide free of charge ability to change event request data before it's approve, so it'll be implemented with Python, Valkey and Litestar

** Excluded features from the first stage

Given list of features can be interpreted as obviously required or any section below can unintentionally imply them, so they explicitly mentioned

- Tickets refund
- Cancel or refund event request submission
- Any sort of push notifications about any updates or new data
- Ticket price change on sold out and increasing available seats
- Remove assigned staff person to the event

** Proxy contract vs multiple versions

Because of big amount of reads from the blockchain (which lead to spending gas on call delegation in proxy) we offer to use multiple versions and support them on the client side. To prevent difficulties of funds & data migration between versions, we'll create new events in a new version, but still support the previous ones until all events there will be closed or canceled.

** Component design

*** General overview

#+begin_src plantuml :file ./img/component-design.png
title General component design

() Customer

component TicketsApp {
}

component SmartContracts {
  [EventManager.sol]
  [EventTicket.sol]
}

database Backend {
  database Database
}

cloud IPFS

[Customer] -- TicketsApp : Uses

TicketsApp -- SmartContracts : Interacts with
TicketsApp -- IPFS : Stores/Fetches Metadata
TicketsApp -- Backend : Interacts with
Backend -- Database : Stores unapproved event requests

[EventManager.sol] -- [EventTicket.sol] : Mints Tickets
#+end_src

#+RESULTS:
[[file:./img/component-design.png]]

*** Smart contract

**** Event manager

#+begin_src plantuml :file ./img/event-manager.png
class CyberValleyEventManager {
  - event[uint256 => Event]
  - eventPlace[uint256 => EventPlace]
  - eventRequest[uint256 => EventRequest]
  - usdtTokenContract: address
  - cyberValleyTicketContract: address
  - devTeamPercentage: uint256
  - masterPercentage: uint256

  - {static} MASTER_ROLE: bytes32
  - {static} STAFF_ROLE: bytes32
}

class EventRequest {
  - creator: address
  - eventPlaceId: uint256
  - startTimestamp: uint256
}

class EventPlace {
  - maxTickets: uint16
  - minTickets: uint16
  - minPrice: uint16
  - minDays: uint8
}

class Event {
  - creator: address
  - eventDataCID: Multihash
  - balance: uint256
  - cancelled: bool
  - closed: bool
}

class Multihash {
  - digest: bytes32
  - hashFunction: uint8
  - size: uint8
}

abstract class AccessControl {
  + grantRole(bytes32 role, address account)
  + revokeRole(bytes32 role, address account)
  + onlyRole(bytes32 role)
}

class TetherToken {
  + transferFrom(address sender, address recipient, uint256 amount)
  + transfer(address recipient, uint256 amount)
  + balanceOf(address account)
}

interface IERC20 {}

CyberValleyEventManager --|> AccessControl
CyberValleyEventManager --> EventRequest
CyberValleyEventManager --> EventPlace
CyberValleyEventManager --> Event
CyberValleyEventManager --> Multihash
CyberValleyEventManager --o TetherToken
TetherToken ..|> IERC20
Event --> Multihash
#+end_src

#+RESULTS:
[[file:./img/event-manager.png]]

***** Create event place

*Accessible only by master*

Adds a new event place

*Emits* ~NewEventPlaceAvailable~

***** Update event place

*Accessible only by master*

Updates existing event place by it's id

@@warning:Event place can't be changed if there is another event@@

*Emits* ~EventPlaceUpdated~

***** Submit event request

*Public*

- Checks that chosen place is free for the requested period of time
- Checks if requested amount of tickets can fit in the chosen place

Creates new event request, stores it in centralized DB and sends telegram notification to the master

***** Approve event request

*Accessible only by master*

Transforms event request into the proper event which is visible to others

*Emits* ~NewEventAvailable~

***** Decline event request

*Accessible only by master*

Removes event request from the queue and refunds means to the creator

***** Update event

*Accessible only by master*

Allows to change the event data and update it's metadata

*Emits* ~EventWasUpdated~

***** Cancel event

TODO: Autocancel event on specified cancelDate

*Accessible only by master*

Cancels given event and refunds all means between creator and customers who bought a ticket

*Emits* ~EventCancelled~

***** Close event

*Accessible only by master*

Closes given event and sends means to the master, creator and dev team according to their shares

*Emits* ~EventClosed~

***** Verify ticket

*Accessible by master or staff*

Checks if provided NFT was minted by the =EventManager= contract and connected to the given event.

@@warning:Marks the ticket as used for the current day and makes it impossible to reenter the event@@

***** Buy ticket

*Public*

- Checks if the event is available
- Checks if there is available seats for the requested amount of tickets

Sends newly minted asked amount of NFT tickets for the given event in exchange of USDT.

@@warning:Refund is possible only if the event will be canceled@@


**** Event ticket

#+begin_src plantuml :file ./img/event-ticket.png
class EventTicket {
  - name: string
  - symbol: string
  - eventManagerAddress: address
  - tickets[uint256, Ticket]
}

class Ticket {
  eventId: uint256
  days: uint8
  isUsed: bool
}

interface IERC721 {
    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
}

interface IERC721Metadata {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

EventTicket --> Ticket
EventTicket --|> IERC721
EventTicket --|> IERC721Metadata
#+end_src

#+RESULTS:
[[file:./img/event-ticket.png]]

*** Backend

It's required for the two general purposes:

- Temporal storage for the event requests
- Indexing of smart contract state

Both of this solutions provide the most minimal off-chain reading pricing (probably even fit into free tier) and allow to publicly expose them without difficult caching system

**** Temporal event request storage
***** POST /events/requests

*Auth* public

Saves event request before the payment and storing in the blockchain. Customer who had sent event request becomes creator and can list his submissions.

Because this endpoint is publicly available for the V1 the request pool is introduced of big enough size (100_000 or even more). Requests from it will be translated to the persistent memory only after getting event from the =EventManager= about approved payment. This will make it harder to spam requests and make it harder to block the system in general.

*Returns* Saved event request id

#+begin_src plantuml :file ./img/event-request-model.png
class EventRequestModel {
  creator: string
  eventPlaceId: int
  ticketPrice: int
  startDate: datetime
  cancelDate: datetime
  daysAmount: int
}
#+end_src

#+RESULTS:
[[file:./img/event-request-model.png]]

***** GET /events/requests

*Auth* master or creator

*Returns* List of all pending =EventRequestModel= for the master and only owned for creator

***** POST /events

*Auth* master

Converts given event request by it's id into event and stores it in IPFS
Deletes event request from the storage

*Returns* =404= if event request wasn't found

#+begin_src plantuml :file ./img/new-event-model.png
class NewEventModel {
  eventId: int
}
#+end_src

#+RESULTS:
[[file:./img/new-event-model.png]]

**** Indexer
***** GET /events

Allows to effectively fetch all events (finished and pending)

*Returns* List of =EventModel=

#+begin_src plantuml :file ./img/event-model.png
class EventModel {
  + name: string
  + creator: CreatorModel
  + description: DescriptionModel
  + startsAt: datetime
  + daysAmount: int
  + place: EventPlaceModel
  + availableSeats: int
  + ticketPrice: int
}

class CreatorModel {
  + name: string
  + contact: SocialContactModel
}

class DescriptionModel {
  + text: string
  + links: string[]
  + pictureUrl: string
}

class EventPlaceModel {
  + name: string
  + totalSeats: int
}

class SocialContactModel {
  + value: Telegram | Discord | WhatsApp | Instagram
}

EventModel --> CreatorModel
EventModel --> DescriptionModel
EventModel --> EventPlaceModel
CreatorModel --> SocialContactModel
#+end_src

#+RESULTS:
[[file:./img/event-model.png]]

***** GET /event/{event-id}/ticket/{ticket-id}

*Auth* Master & staff

*Returns* Ticket metadata for the given event

#+begin_src plantuml :file ./img/event-ticket-model.png
class EventTicketModel {
  eventId: string
  owner: string
  socials: Socials
  days: int
  usage: int
}
#+end_src

#+RESULTS:
[[file:./img/event-ticket-model.png]]

**** Sign-in with Ethereum

Because of requirement to allow posting and fetching event requests for the master some authentication process should be made. It could be made with JWT and [[https://docs.metamask.io/wallet/how-to/sign-data/#use-personal_sign][Infura's ~personal_sign~ method]]

***** POST /auth/generate-nonce/{public-address}

Generates session and checks if the given ~public-address~ is allowed to sign-in

*Returns* nonce or =403=

***** POST /auth/verify-signature/{public-address}

Verifies signature and returns JWT

*Returns* JWT token or =403=

#+begin_src plantuml :file ./img/verify-signature-model.png
class VerifySignatureModel {
  signature: string
}
#+end_src

#+RESULTS:
[[file:./img/verify-signature-model.png]]

* Questions

** Both desktop and mobile are required?

#+begin_quote
Mobile only
#+end_quote

** Is it required to verify tickets without internet connection?

#+begin_quote
No
#+end_quote

** Will be there multiple masters or the only one in foreseeable future?

#+begin_quote
Only one
#+end_quote

** Event request price fixed in ETH, depends on ETH/USD rate or could be changed by the master?

#+begin_quote
Smart contract should work with USDT
#+end_quote

** Is a ticket transfer allowed e.g. customer A bought a ticket, but sent it to the customer B?

#+begin_quote
Yes
#+end_quote

It requires additional UI and flows to properly update ticket's meta data, so this feature will be skipped in the V1

** Will tickets have some metainfo about the owner (name, number etc)

#+begin_quote
Yes, socials i.e. one or many {Telegram, Discord, Instagram, Whats App}
#+end_quote

** Is it applicable to show available seats count for all (so the creator and master can see it as well without additional screen)?

#+begin_quote
Yes
#+end_quote

** UI design references

#+begin_quote
https://dribbble.com/shots/23082238-Earthquake-Warning-App-Cyberpunk-Design-Style
#+end_quote
